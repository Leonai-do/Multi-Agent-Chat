/**
 * @file This file contains all shared TypeScript type definitions for the application.
 */

import { ReactNode } from 'react';

/**
 * Defines the possible theme settings for the application.
 * 'system' uses the user's OS preference.
 */
export type Theme = 'light' | 'dark' | 'system';

/**
 * Represents the multi-step collaboration process of the AI agents for a single model response.
 * @property {string[]} initialResponses - The first draft from each of the four agents.
 * @property {string[]} refinedResponses - The second, peer-reviewed draft from each agent.
 */
export interface CollaborationTrace {
  initialResponses: string[];
  refinedResponses: string[];
}

/**
 * Represents a single web source used for grounding a model's response.
 * @property {string} title - The title of the web page.
 * @property {string} url - The URL of the source.
 * @property {string} content - A snippet or the full content from the source.
 */
export interface Source {
  title: string;
  url: string;
  content: string;
}

/**
 * Represents a single message in a chat conversation.
 * @property {string} id - A unique identifier for the message.
 * @property {'user' | 'model'} role - The sender of the message.
 * @property {{ text: string }[]} parts - The content of the message.
 * @property {CollaborationTrace} [collaborationTrace] - Optional data on the agent collaboration process for model messages.
 * @property {Source[]} [sources] - Optional list of web sources used to generate the message.
 */
export interface Message {
  id: string;
  role: 'user' | 'model';
  parts: { text: string }[];
  collaborationTrace?: CollaborationTrace;
  sources?: Source[];
}

/**
 * Represents a full chat conversation.
 * @property {string} id - A unique identifier for the chat session.
 * @property {string} title - The title of the chat, can be auto-generated.
 * @property {Message[]} messages - An array of all messages in the conversation.
 */
export interface Chat {
  id: string;
  title: string;
  messages: Message[];
}

/**
 * Represents the real-time state of a single AI agent during the collaboration process.
 * @property {number} id - The agent's identifier (0-3).
 * @property {'pending' | 'initializing' | 'writing' | 'refining' | 'done'} status - The current stage of the agent.
 * @property {string} response - The current response text being generated by the agent.
 */
export interface LiveAgentState {
  id: number;
  status: 'pending' | 'initializing' | 'writing' | 'refining' | 'done';
  response: string;
}